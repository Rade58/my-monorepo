{
  "name": "db_two",
  "version": "1.0.0",
  "main": "./src/index.ts",
  "types": "./src/index.ts",
  "devDependencies": {
    "dotenv-cli": "^7.2.1",
    "prisma": "^5.0.0",
    "tsconfig": "workspace:*"
  },
  "dependencies": {
    "@prisma/client": "^5.0.0",
    "ts-node": "^10.9.1"
  },
  "scripts": {
    "db:gen": "npx prisma generate",
    "db:push": "prisma db push --skip-generate",
    "---dbs--startup--and---kill---commands---(dev)---": "------------------first you run dbs-dev-up (in one termianal) after that you can run prisma comands in separate terminal__________",
    "dbs-dev-up": "docker-compose up",
    "dbs-dev-down": "docker-compose down",
    "mysql-cont-bash": "docker-compose run spacesuit-serv bash",
    "redis-cont-bash": "docker-compose run fancy-jackal-serv bash",
    "redis-cli-dev": "docker exec -it fancy-jackal redis-cli",
    "mysql-dev-kill": "docker kill spacesuit",
    "redis-dev-kill": "docker kill fancy-jackal",
    "---comment(prisma workflow)---": "-----use push, and at the end when you sure, you run migration -----",
    "---comment2(prisma workflow)---": "-----if you have conflicts that means tht field you defined should be optional (this is crucial for production because you don't want to whipe out your database)-----",
    "---prisma---development---": "---------prisma development comands----------",
    "p-push-dev": "npx dotenv -e .env.development -- npx prisma db push",
    "p-migrate-init-dev": "npx dotenv -e .env.development -- npx prisma migrate dev --name init",
    "p-migrate-dev": "npx dotenv -e .env.development -- npx prisma migrate dev",
    "p-migrate-reset-dev": "npx dotenv -e .env.development -- npx prisma migrate reset",
    "p-migrate-reset-dev-forced": "npx dotenv -e .env.development -- npx prisma migrate reset --force",
    "p-seed-dev": "npx dotenv -e .env.development -- npx prisma db seed",
    "p-seed-dev-old": "npx dotenv -e .env.development -- npm run ts-node prisma/seed.ts --preview-feature",
    "p-studio-dev": "npx dotenv -e .env.development -- npx prisma studio",
    "---prisma---production---": "---------prisma production comands----------",
    "p-push-prod": "npx dotenv -e .env.production -- npx prisma db push",
    "p-migrate-init-prod": "npx dotenv -e .env.production -- npx prisma migrate dev --name init",
    "p-migrate-prod": "npx dotenv -e .env.production -- npx prisma migrate dev",
    "p-migrate-reset-prod": "npx dotenv -e .env.production -- npx prisma migrate reset",
    "p-migrate-reset-prod-forced": "npx dotenv -e .env.production -- npx prisma migrate reset --force",
    "p-seed-prod": "npx dotenv -e .env.production -- npx prisma db seed",
    "p-seed-prod-old": "npx dotenv -e .env.production -- npm run ts-node prisma/seed.ts --preview-feature",
    "p-studio-prod": "npx dotenv -e .env.production -- npx prisma studio --port 5556",
    "---prisma---testing--env---": "---------prisma testing environment comands----------",
    "p-push-test": "npx dotenv -e .env.test.local -- npx prisma db push",
    "p-migrate-init-test": "npx dotenv -e .env.test.local -- npx prisma migrate dev --name init",
    "p-migrate-test": "npx dotenv -e .env.test.local -- npx prisma migrate dev",
    "p-migrate-reset-test": "npx dotenv -e .env.test.local -- npx prisma migrate reset",
    "p-migrate-reset-test-forced": "npx dotenv -e .env.test.local -- npx prisma migrate reset --force",
    "p-seed-test": "npx dotenv -e .env.test.local -- npx prisma db seed",
    "p-seed-test-old": "npx dotenv -e .env.test.local -- npm run ts-node prisma/seed.ts --preview-feature",
    "p-studio-test": "npx dotenv -e .env.test.local -- npx prisma studio",
    "---prisma---introspection---": "-------pulling down schema from the already established database (not going to use this probably)",
    "p-introspect": "npx dotenv -e .env.production -- npx prisma introspect"
  }
}