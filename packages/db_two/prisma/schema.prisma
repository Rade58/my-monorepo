// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// because I want to use this datbase across
// multiple projects I'll use prefixes for apps

// -------------------------------------------------------------
// -------------------------------------------------------------
// feel-ai      related models
// -------------------------------------------------------------
// -------------------------------------------------------------

model FeelUser {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  clerkId String @unique
  email   String @unique

  journalEntries FeelJournalEntry[]
}

model FeelJournalEntry {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  content String @db.Text

  userId String
  user   FeelUser @relation(fields: [userId], references: [id])

  feelAnalysis FeelAnalysis?

  // we want to be able to query by the unique id
  // and by the unique userId

  // if uerId would be unique by itself (by adding @unique to the right)
  // that would mean that one user can only have one entry
  // when you would create new entry and connecting userId
  // error would be thrown

  // so
  // @@index([userId])

  // we are adding compound index

  @@unique([userId, id])
}

model FeelAnalysis {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  mood     String
  summary  String  @db.Text
  color    String
  negative Boolean

  journalEntryId String
  journalEntry   FeelJournalEntry @relation(fields: [journalEntryId], references: [id])

  @@unique([journalEntryId])
}

// -------------------------------------------------------------
// -------------------------------------------------------------
